;;=== Variables ===;;
(defvar eww "$HOME/.local/bin/eww")

;; Reveal Vars
(defvar time_rev false)
(defvar power_rev false)

;; Lock Vars
(defvar music_lock false)

;; Constants
(defvar SPACING 8)

;; Listen
(deflisten music :initial ""
"playerctl --follow metadata --format '{\"artist\": \"{{ artist }}\", \"title\": \"{{ title }}\", \"artUrl\": \"{{ mpris:artUrl }}\"}' || true")
(deflisten workspace
"scripts/workspace")
(deflisten brightness
"scripts/getbright")
(deflisten conn
"scripts/conn")

;; Poll
(defpoll volume :interval "1s"
"scripts/getvol")
(defpoll time :interval "10s"
"date '+%H:%M'")
(defpoll time_date :interval "1m"
"date '+%a, %b %d'")
(defpoll bat_cur :interval "10s"
"scripts/bat --current")
(defpoll bat_stat :interval "3s"
"scripts/bat --status")

;;=== Generic Widgets ===;;
(defwidget reveal_box [reveal_on ?class ?spacing]
  (eventbox
    :onhover "${eww} update ${reveal_on}=true"
    :onhoverlost "${eww} update ${reveal_on}=false"
    (box
      :class {class ?: "reveal"}
      :space-evenly false
      :orientation "h"
      :valign "center"
      :spacing {spacing ?: SPACING}
      (children)
    )
  )
)

(defwidget metric [label value onchange ?_tooltip]
  (box
    :orientation "h"
    :class "metric"
    :space-evenly false
    (box
      :tooltip _tooltip
      :class "label" label
    )
    (scale :min 0
      :max 100
      :active {onchange != ""}
      :value value
      :onchange onchange
    )
  )
)

;;=== Widgets ===;;

(defwidget time []
  (reveal_box
    :reveal_on "time_rev"
    :class "time_module"
    (label
      :class "time"
      :text time
    )
    (revealer
      :transition "slideright"
      :reveal time_rev
      :duration "350ms"
      (button
        :class "time_date"
        :onclick "echo asdf" time_date
      )
    )
  )
)

(defwidget power []
  (reveal_box
    :reveal_on "power_rev"
    :class "power_module"
    (button
      :tooltip "Poweroff"
      :onclick "systemctl poweroff" ""
    )
    (revealer
      :transition "slideright"
      :reveal power_rev
      :duration "350ms"
      (box
        :class "power_buttons"
        :space-evenly false
        :orientation "h"
        :spacing SPACING
        (button
          :tooltip "reboot"
          :onclick "systemctl reboot" "ﰇ"
        )
        (button
          :tooltip "Hibernate"
          :onclick "systemctl suspend" "⏼"
        )
        (button
          :tooltip "Suspend"
          :onclick "systemctl suspend-then-hibernate" "鈴"
        )
        (button
          :tooltip "Lock"
          :onclick "xset s activate" ""
        )
        (button
          :tooltip "Logout"
          :onclick "bspc quit" " "
        )
      )
    )
  )
)

(defwidget conn []
  (box
    (literal
      :class "conn"
      :content conn
    )
  )
)

(defwidget bat []
  (box
    :class "bat"
    (label
      :tooltip "${bat_cur}%"
      :text {
      bat_stat == 'Charging' ? ""
      :bat_cur >= '90' ? ""
      :bat_cur >= '80' ? ""
      :bat_cur >= '70' ? ""
      :bat_cur >= '60' ? ""
      :bat_cur >= '50' ? ""
      :bat_cur >= '40' ? ""
      :bat_cur >= '30' ? ""
      :bat_cur >= '20' ? ""
      :bat_cur >= '10' ? ""
      :""}
    )
  )
)

(defwidget vol []
  (metric
    :label {volume == 0 ? "" : "" }
    :value volume
    :class "vol"
    :_tooltip "${volume}%"
    :onchange "amixer -D pulse sset Master {}%"
  )
)

(defwidget brightness []
  (metric
    :label ""
    :value brightness
    :class "bright"
    :_tooltip "${brightness}%"
    :onchange "brightnessctl s {}%"
  )
)

(defwidget workspaces []
  (literal
    :content workspace
    :valign "center"
    :valign "center"
  )
)

(defwidget music_button []
  (button
    :class "music"
    :onclick "scripts/pop music"
    (label
      :class "music"
      :limit-width  50
      :wrap true
      :text {music != "" ? " ${music.title} - ${music.artist}"  : ""}
    )
  )
)

(defwidget right []
  (box
    :class "right"
    :orientation "h"
    :space-evenly false
    :halign "end"
    :valign "center"
    :spacing SPACING
    (vol)
    (brightness)
    (conn)
    (bat)
    (power)
    (time)
  )
)

(defwidget center []
  (box
    :class "center"
    :orientation "h"
    :valing "baseline"
    :space-evenly false
    (music_button)
  )
)


(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (center)
    (right)
  )
)

(defwidget music_ctl []
  (box
    :space-evenly false
    :orientation "v"
    (box
      :class "music_cover"
      :style "background-image: url('${music.artUrl}');"
    )
  )
)

;;=== Popups ===;;
(defwindow music_popup
  :stacking "fg"
  :class "${music_lock}"
  :geometry
  (geometry
    :x "0%"
    :y "4%"
    :width "240px"
    :height "100px"
    :anchor "top center"
  )
  (music_ctl)
)

;;=== Bar ===;;
(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry
  (geometry
    :x "0px"
    :y "3px"
    :width "99%"
    :height "1%"
    :anchor "top center"
  )
  :stacking "fg"
  :reserve
  (struts :distance "3%"
  :side "top")
  :wm-ignore false
  (bar)
)
